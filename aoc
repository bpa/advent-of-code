#!/usr/bin/env python3

from datetime import datetime
from platform import system
import sys
import os
from pathlib import Path
from pytz import timezone
from string import Template
import time
import subprocess
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


def fetch_input(year, day):
    Path(f'input/{year}').mkdir(parents=True, exist_ok=True)
    if not os.path.exists(f'input/{year}/day{day}.test'):
        with open(f'input/{year}/day{day}.test', 'w'):
            pass

    now = datetime.now(timezone('est'))
    start = datetime(int(year), 12, int(day), tzinfo=timezone('est'))
    if now < start:
        time.sleep((start - now).total_seconds() + 30)
    if not os.path.exists(f'input/{year}/day{day}.txt'):
        subprocess.run(f'cargo aoc input -y {year} -d {day}', shell=True)


class Handler(FileSystemEventHandler):
    def __init__(self, year, day, run):
        self.input = f'../input/{year}/day{day}.txt'
        self.test_input = f'../input/{year}/day{day}.test'
        self.run = run
        self.debounce = {}

    def on_modified(self, event):
        if event.is_directory or '__pycache__' in event.src_path or event.src_path[-4:] in ['.tmp', '.swp']:
            return

        modified = os.path.getmtime(event.src_path)
        last_modified = self.debounce.get(event.src_path, 0)
        if modified - last_modified < 1:
            return
        self.debounce[event.src_path] = modified
        os.system('clear')
        try:
            if os.path.getsize(self.test_input) > 0:
                os.environ['DEBUG'] = 'true'
                subprocess.run(
                    f'{self.run} {self.test_input}', shell=True)
                os.environ.pop('DEBUG')
                print("\n----\n")
        except:
            pass
        subprocess.run(f'{self.run} {self.input}', shell=True)


def command_python(day):
    libdir = Path(__file__).parent.resolve() / 'lib/python'
    os.environ['PYTHONPATH'] = str(libdir)

    return f'python3 day{day}.py'


def command_rust(day):
    return f'cargo aoc -d {day} -i'


def command_go(day):
    return f'go run day{day}.go'


LANG = {
    "go": ['go', 'go'],
    "python": ['py', 'python'],
    "rust": ['rs', 'src'],
}


def write_day_template(lang, year, day):
    (ext, dir) = LANG[lang]
    print(Path(__file__).parent.resolve())
    templatedir = Path(__file__).parent.resolve() / 'templates'
    script = f'{dir}/day{day}.{ext}'
    if not Path(script).exists():
        with open(templatedir/f'template.{ext}') as f:
            template = Template(f.read())
        with open(script, 'w') as file:
            file.write(template.substitute(day=day, year=year))


if __name__ == '__main__':
    languages = sorted([l[8:] for l in globals() if l.startswith('command_')])
    if len(sys.argv) < 3 or sys.argv[2] not in languages:
        print(f"Usage: {sys.argv[0]} <day> <lang>")
        print(f"  Supported languages: {languages}")
        sys.exit(1)
    year = os.path.basename(os.getcwd())
    day = sys.argv[1]
    lang = sys.argv[2]

    write_day_template(lang, year, day)
    fetch_input(year, day)

    libdir = Path(__file__).parent.resolve() / f'lib/{lang}'

    os.chdir(LANG[lang][1])
    observer = Observer()
    cmd = globals()[f'command_{lang}'](day)
    handler = Handler(year, day, cmd)
    observer.schedule(handler, '.', recursive=True)
    observer.schedule(handler, str(libdir), recursive=True)
    observer.schedule(handler, f'../input/{year}/day{day}.test')
    observer.start()
    print("Watching for events")

    try:
        while True:
            time.sleep(600)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
